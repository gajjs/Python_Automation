
You need to **select the directory `G:\Python_Automation` and set the VCS to `Git`**.

### ‚úÖ Here‚Äôs Exactly What To Do:

1. In **Settings ‚Üí Version Control**, click on **`Directory Mappings`** on the right.
2. Click the **‚ûï (Add)** button.
3. In the dialog:

   * **Select directory**: `G:\Python_Automation`
   * **VCS**: Choose **`Git`** from the dropdown.
4. Click **OK** or **Apply** to save.

To connect your PyCharm project at `G:\Python_Automation` to GitHub, follow these steps:

### ‚úÖ **Step 1: Initialize Git in Your Project Folder**

1. Open PyCharm.
2. Open your project at `G:\Python_Automation`.
3. Go to `VCS` > `Enable Version Control Integration`.
4. Select `Git` and click OK.

### ‚úÖ **Step 2: Commit Your Code**

1. Go to `VCS` > `Commit` (or use `Ctrl + K`).
2. Select files, write a commit message, and click **Commit**.

### ‚úÖ **Step 3: Create a New Repository on GitHub**

1. Go to [https://github.com](https://github.com) and log in.
2. Click `+` (top right) > **New repository**.
3. Name your repo (e.g., `Python_Automation`), **don‚Äôt initialize with a README**.
4. Click **Create repository**.

### ‚úÖ **Step 4: Link Local Project to GitHub Remote**

1. Copy the repo URL (e.g., `https://github.com/yourusername/Python_Automation.git`).
2. In PyCharm, go to `Git` > `Manage Remotes` (or):

   * Open the terminal (at bottom of PyCharm) and run:

     ```bash
     git remote add origin https://github.com/yourusername/Python_Automation.git
     ```
### ‚úÖ **Step 5: Push Code to GitHub**

1. In PyCharm, go to `VCS` > `Git` > `Push` (or use `Ctrl + Shift + K`).
2. Push to `origin/main` or `origin/master` (depending on your default branch).



### ‚úÖ **(Optional) Set Up GitHub Authentication**

If you're prompted for authentication:

* Use **GitHub Token** instead of a password.
* Go to GitHub > **Settings** > **Developer Settings** > **Personal Access Tokens** > **Generate new token**.
* Select scopes like `repo`, set an expiration, and use that token in PyCharm.






















Absolutely! Here's a complete step-by-step guide to:

‚úÖ Create a Python project in **PyCharm**
‚úÖ Create a **GitHub repository**
‚úÖ Link both using **Git** and push code to GitHub

---

## üîß Step-by-Step Guide to Link PyCharm Project with GitHub

---

### ‚úÖ **Step 1: Create a Project in PyCharm**

1. Open **PyCharm**.
2. Click on **"New Project"**.
3. Choose:

   * **Python as the language**
   * Select your **interpreter** (or create virtualenv if needed)
4. Name your project (e.g., `Python_Automation`) and click **Create**.

---

### ‚úÖ **Step 2: Enable Git in Your PyCharm Project**

1. Go to `VCS` (Version Control System) > **Enable Version Control Integration**
2. Choose **Git** and click **OK**

This will create a hidden `.git` folder ‚Äî now your project is a Git repository.

---

### ‚úÖ **Step 3: Create a GitHub Repository**

1. Go to [https://github.com](https://github.com)
2. Click on **+ (top-right)** ‚Üí **New repository**
3. Name it `Python_Automation`
4. **Do not** initialize with README or .gitignore (since PyCharm will handle it)
5. Click **Create Repository**

After creation, GitHub shows you a URL like:

```
https://github.com/gajjs/Python_Automation.git
```

---

### ‚úÖ **Step 4: Link PyCharm Project to GitHub Repository**

In **PyCharm Terminal** (at bottom):

```bash
git remote add origin https://github.com/gajjs/Python_Automation.git
```

If you already had a wrong URL before:

```bash
git remote remove origin
git remote add origin https://github.com/gajjs/Python_Automation.git
```

---

### ‚úÖ **Step 5: Stage, Commit & Push Code**

In the PyCharm terminal:

```bash
git add .
git commit -m "Initial commit"
git branch -M main
git push -u origin main
```

---

### ‚úÖ **Step 6: Verify on GitHub**

Go to [https://github.com/gajjs/Python\_Automation](https://github.com/gajjs/Python_Automation)

‚úÖ You will see your code uploaded there.

---

## üìù Optional (but good practice):

* Add a `.gitignore` file in PyCharm to avoid pushing unwanted files (e.g., `.idea/`, `__pycache__/`, `.venv/`)
* Add a `README.md` with basic project info

---

Would you like me to give you the exact `.gitignore` content for Python projects or generate a sample README?
